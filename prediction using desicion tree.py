# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17mJhzDGgpOd_23whThgrd_ynN2sSH9UH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

iris_data = pd.read_csv('/content/iris dataset.csv')

iris_data.info()

iris_data.head()

iris_data.describe()

iris_data.species.value_counts()

plt.scatter(iris_data['sepal_length'],iris_data['sepal_width'])
plt.show()

sns.set_style('whitegrid')
sns.FacetGrid(iris_data , hue = 'species')\
 .map(plt.scatter, 'sepal_length' , 'sepal_width')\
 .add_legend()

plt.show()

sns.pairplot(iris_data.drop(['sepal_length'], axis =1), hue = 'species')
plt.show()

iris_data['sepal_diff'] = iris_data['sepal_length']-iris_data['sepal_width']
iris_data['petal_diff'] = iris_data['petal_length']-iris_data['petal_width']

iris_data

sns.set_style('whitegrid')
sns.FacetGrid(iris_data,hue='species')   .map(sns.distplot,'petal_diff')   .add_legend()
plt.show()

iris_data['sepal_petal_len_diff'] = iris_data['sepal_length']-iris_data['petal_length']
iris_data['sepal_petal_width_diff'] = iris_data['sepal_width']-iris_data['petal_width']
iris_data

sns.set_style('whitegrid')
sns.FacetGrid(iris_data,hue='species')   .map(plt.scatter,'sepal_petal_len_diff','sepal_petal_width_diff')   .add_legend()
plt.show()

sns.set_style('whitegrid')
sns.FacetGrid(iris_data,hue='species')   .map(sns.distplot,'petal_length')   .add_legend()
plt.show()

iris_data['sepal_petal_len_diff'] = iris_data['sepal_length']-iris_data['petal_length']
iris_data['sepal_petal_width_diff'] = iris_data['sepal_width']-iris_data['petal_width']
iris_data

iris_data['Sepal_petal_len_wid_diff'] = iris_data['sepal_length']-iris_data['petal_width']
iris_data['Sepal_petal_wid_len_diff'] = iris_data['sepal_width']-iris_data['petal_length']
iris_data

sns.set_style('whitegrid')
sns.FacetGrid(iris_data,hue='species')   .map(plt.scatter,'Sepal_petal_wid_len_diff','Sepal_petal_len_wid_diff')   .add_legend()
plt.show()

print(iris_data.columns)

sns.set_style('whitegrid')
sns.FacetGrid(iris_data,hue='species')   .map(sns.distplot,'Sepal_petal_wid_len_diff')   .add_legend()
plt.show()

sns.pairplot(iris_data[['species', 'sepal_diff', 'petal_diff', 'sepal_petal_len_diff',       'sepal_petal_width_diff', 'Sepal_petal_len_wid_diff',       'Sepal_petal_wid_len_diff']], hue='species')
plt.show()

print(iris_data.columns)

for i in iris_data.columns:
    if i == 'species':
        continue
    sns.set_style('whitegrid')
    sns.FacetGrid(iris_data,hue='species')    .map(sns.distplot,i)    .add_legend()
    plt.show()

from sklearn import tree
import graphviz
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split, cross_val_score

X = iris_data[['sepal_length', 'sepal_width','petal_length', 'petal_width','Sepal_petal_wid_len_diff','sepal_petal_width_diff']]
y = iris_data['species']

print(iris_data.columns)

Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, y, test_size=0.30, random_state=42)

Xt, Xcv, Yt, Ycv = train_test_split(Xtrain, Ytrain, test_size=0.10, random_state=42)

iris_clf = DecisionTreeClassifier(criterion='gini',min_samples_split=2)
iris_clf.fit(Xt, Yt)

tree.plot_tree(iris_clf)

dot_data = tree.export_graphviz(iris_clf, out_file=None)

graph = graphviz.Source(dot_data)
graph

print('Accuracy score is:',cross_val_score(iris_clf, Xt, Yt, cv=3, scoring='accuracy').mean())

from sklearn.metrics import multilabel_confusion_matrix, accuracy_score

Y_hat = iris_clf.predict(Xcv)

print('Accuracy score for validation test data is:',accuracy_score(Ycv, Y_hat))
multilabel_confusion_matrix(Ycv , Y_hat)

YT_hat = iris_clf.predict(Xtest)
YT_hat

print('Model Accuracy Score on totally unseen data(Xtest) is:',accuracy_score(Ytest, YT_hat)*100,'%')
multilabel_confusion_matrix(Ytest , YT_hat)

iris_Fclf = DecisionTreeClassifier(criterion='gini',min_samples_split=2)
iris_Fclf.fit(Xtrain, Ytrain)


tree.plot_tree(iris_Fclf)

dot_data = tree.export_graphviz(Iris_Fclf, out_file=None)
graph = graphviz.Source(dot_data)
graph

YT_Fhat = iris_Fclf.predict(Xtest)
YT_Fhat

print('Model Accuracy Score on totally unseen data(Xtest) is:',accuracy_score(Ytest, YT_Fhat)*100,'%')
multilabel_confusion_matrix(Ytest , YT_Fhat)

Test_point = [[5.4,3.0,4.5,1.5,-1.5,1.5],
             [6.5,2.8,4.6,1.5,-1.8,1.3],
             [5.1,2.5,3.0,1.1,-0.5,1.4],
             [5.1,3.3,1.7,0.5,1.6,2.8],
             [6.0,2.7,5.1,1.6,-2.4,1.1],
             [6.0,2.2,5.0,1.5,-2.8,0.7]]

print(Iris_Fclf.predict(Test_point))

